// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package your.basepackage.name.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import your.basepackage.name.resources.Oslc_rmDomainConstants;

import your.basepackage.name.resources.DctermsDomainConstants;
import your.basepackage.name.resources.Oslc_rmDomainConstants;
import your.basepackage.name.resources.Requirement;
import your.basepackage.name.resources.RequirementCollection;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_NAMESPACE)
@OslcName(Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_LOCALNAME)
@OslcResourceShape(title = "RequirementCollection Shape", describes = Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_TYPE)
public class RequirementCollection
    extends AbstractResource
    implements IRequirementCollection
{
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:description
    // End of user code
    private String description;
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:decomposedBy
    // End of user code
    private Set<Link> decomposedBy = new HashSet<Link>();
    // Start of user code attributeAnnotation:decomposes
    // End of user code
    private Link decomposes;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public RequirementCollection()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public RequirementCollection(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_PATH,
        RequirementCollection.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local RequirementCollection Resource} - update RequirementCollection.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public void addDecomposedBy(final Link decomposedBy)
    {
        this.decomposedBy.add(decomposedBy);
    }
    
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }

    // Start of user code getterAnnotation:description
    // End of user code
    @OslcName("description")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "description")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getDescription()
    {
        // Start of user code getterInit:description
        // End of user code
        return description;
    }

    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "identifier")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(true)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }

    // Start of user code getterAnnotation:decomposedBy
    // End of user code
    @OslcName("decomposedBy")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.OSLC_REQUIREMENTS_MANAGEMENT_NAMSPACE + "decomposedBy")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_rmDomainConstants.REQUIREMENT_TYPE, Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getDecomposedBy()
    {
        // Start of user code getterInit:decomposedBy
        // End of user code
        return decomposedBy;
    }

    // Start of user code getterAnnotation:decomposes
    // End of user code
    @OslcName("decomposes")
    @OslcPropertyDefinition(Oslc_rmDomainConstants.OSLC_REQUIREMENTS_MANAGEMENT_NAMSPACE + "decomposes")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_TYPE})
    @OslcReadOnly(false)
    public Link getDecomposes()
    {
        // Start of user code getterInit:decomposes
        // End of user code
        return decomposes;
    }

    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
        // Start of user code setterFinalize:title
        // End of user code
    }

    // Start of user code setterAnnotation:description
    // End of user code
    public void setDescription(final String description )
    {
        // Start of user code setterInit:description
        // End of user code
        this.description = description;
        // Start of user code setterFinalize:description
        // End of user code
    }

    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;
        // Start of user code setterFinalize:identifier
        // End of user code
    }

    // Start of user code setterAnnotation:decomposedBy
    // End of user code
    public void setDecomposedBy(final Set<Link> decomposedBy )
    {
        // Start of user code setterInit:decomposedBy
        // End of user code
        this.decomposedBy.clear();
        if (decomposedBy != null)
        {
            this.decomposedBy.addAll(decomposedBy);
        }
        // Start of user code setterFinalize:decomposedBy
        // End of user code
    }

    // Start of user code setterAnnotation:decomposes
    // End of user code
    public void setDecomposes(final Link decomposes )
    {
        // Start of user code setterInit:decomposes
        // End of user code
        this.decomposes = decomposes;
        // Start of user code setterFinalize:decomposes
        // End of user code
    }

}
