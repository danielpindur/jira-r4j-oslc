// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package cz.vutbr.fit.danielpindur.oslc.r4j.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.inject.Inject;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import cz.vutbr.fit.danielpindur.oslc.shared.errors.ErrorHandler;
import org.apache.wink.json4j.JSONException;
import org.apache.wink.json4j.JSONObject;
import org.apache.wink.json4j.JSONArray;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.eclipse.lyo.oslc4j.core.OSLC4JConstants;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import cz.vutbr.fit.danielpindur.oslc.r4j.RestDelegate;
import cz.vutbr.fit.danielpindur.oslc.r4j.ServerConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Jira_r4jDomainConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Jira_r4jDomainConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.servlet.ServiceProviderCatalogSingleton;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Folder;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Person;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Project;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Requirement;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.RequirementCollection;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Jira_r4jDomainConstants.JIRA_R4J_NAMSPACE)
@Path("folders")
public class ServiceProviderService1
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;
    @Inject  private RestDelegate delegate;

    private static final Logger log = LoggerFactory.getLogger(ServiceProviderService1.class);

    // Start of user code class_attributes
    private static final ErrorHandler errorHandler = new ErrorHandler(log);
    // End of user code

    // Start of user code class_methods
    // End of user code

    public ServiceProviderService1()
    {
        super();
    }

    private void addCORSHeaders (final HttpServletResponse httpServletResponse) {
        //UI preview can be blocked by CORS policy.
        //add select CORS headers to every response that is embedded in an iframe.
        httpServletResponse.addHeader("Access-Control-Allow-Origin", "*");
        httpServletResponse.addHeader("Access-Control-Allow-Methods", "GET, OPTIONS, HEAD");
        httpServletResponse.addHeader("Access-Control-Allow-Headers", "origin, content-type, accept, authorization");
        httpServletResponse.addHeader("Access-Control-Allow-Credentials", "true");
    }

    @OslcQueryCapability
    (
        title = "QueryFolder",
        label = "QueryFolder",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Jira_r4jDomainConstants.FOLDER_PATH,
        resourceTypes = {Jira_r4jDomainConstants.FOLDER_TYPE},
        usages = {}
    )
    @GET
    @Path("queryFolder")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Operation(
        summary = "Query capability for resources of type {" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "}",
        description = "Query capability for resources of type {" + "<a href=\"" + Jira_r4jDomainConstants.FOLDER_TYPE + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Jira_r4jDomainConstants.FOLDER_PATH + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE), @Content(mediaType = MediaType.TEXT_HTML)})
        }
    )
    public Folder[] queryFolders(
                                                    
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("oslc.prefix") final String prefix,
                                                     @QueryParam("oslc.paging") final String pagingString,
                                                     @QueryParam("page") final String pageString,
                                                     @QueryParam("oslc.pageSize") final String pageSizeString) throws IOException, ServletException
    {
        boolean paging=false;
        int page=0;
        int pageSize=20;
        if (null != pagingString) {
            paging = Boolean.parseBoolean(pagingString);
        }
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryFolders
        // Here additional logic can be implemented that complements main action taken in RestDelegate
        // End of user code
        // TODO: error handler

        List<Folder> resources = delegate.queryFolders(httpServletRequest, where, prefix, paging, page, pageSize);
        UriBuilder uriBuilder = UriBuilder.fromUri(uriInfo.getAbsolutePath())
            .queryParam("oslc.paging", "true")
            .queryParam("oslc.pageSize", pageSize)
            .queryParam("page", page);
        if (null != where) {
            uriBuilder.queryParam("oslc.where", where);
        }
        if (null != prefix) {
            uriBuilder.queryParam("oslc.prefix", prefix);
        }
        httpServletRequest.setAttribute("queryUri", uriBuilder.build().toString());
        if ((OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() >= pageSize) 
            || (!OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() > pageSize)) {
            resources = resources.subList(0, pageSize);
            uriBuilder.replaceQueryParam("page", page + 1);
            httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE, uriBuilder.build().toString());
        }
        return resources.toArray(new Folder [resources.size()]);
    }

    @GET
    @Path("queryFolder")
    @Produces({ MediaType.TEXT_HTML })
    @Operation(
        summary = "Query capability for resources of type {" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "}",
        description = "Query capability for resources of type {" + "<a href=\"" + Jira_r4jDomainConstants.FOLDER_TYPE + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Jira_r4jDomainConstants.FOLDER_PATH + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE), @Content(mediaType = MediaType.TEXT_HTML)})
        }
    )
    public void queryFoldersAsHtml(
                                    
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("oslc.prefix") final String prefix,
                                       @QueryParam("oslc.paging") final String pagingString,
                                       @QueryParam("page") final String pageString,
                                       @QueryParam("oslc.pageSize") final String pageSizeString) throws ServletException, IOException
    {
        boolean paging=false;
        int page=0;
        int pageSize=20;
        if (null != pagingString) {
            paging = Boolean.parseBoolean(pagingString);
        }
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != pageSizeString) {
            pageSize = Integer.parseInt(pageSizeString);
        }

        // Start of user code queryFoldersAsHtml
        // End of user code

        List<Folder> resources = delegate.queryFolders(httpServletRequest, where, prefix, paging, page, pageSize);

        if (resources!= null) {
            // Start of user code queryFoldersAsHtml_setAttributes
            // End of user code

            UriBuilder uriBuilder = UriBuilder.fromUri(uriInfo.getAbsolutePath())
                .queryParam("oslc.paging", "true")
                .queryParam("oslc.pageSize", pageSize)
                .queryParam("page", page);
            if (null != where) {
                uriBuilder.queryParam("oslc.where", where);
            }
            if (null != prefix) {
                uriBuilder.queryParam("oslc.prefix", prefix);
            }
            httpServletRequest.setAttribute("queryUri", uriBuilder.build().toString());

        if ((OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() >= pageSize) 
            || (!OSLC4JUtils.hasLyoStorePagingPreciseLimit() && resources.size() > pageSize)) {
                resources = resources.subList(0, pageSize);
                uriBuilder.replaceQueryParam("page", page + 1);
                httpServletRequest.setAttribute(OSLC4JConstants.OSLC4J_NEXT_PAGE, uriBuilder.build().toString());
            }
            httpServletRequest.setAttribute("resources", resources);
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/cz/vutbr/fit/danielpindur/oslc/r4j/folderscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "SelectorFolder",
         label = "SelectorFolder",
         uri = "folders/selectorFolder",
         hintWidth = "250px",
         hintHeight = "250px",
         resourceTypes = {Jira_r4jDomainConstants.FOLDER_TYPE},
         usages = {}
    )
    @GET
    @Path("selectorFolder")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public Response FolderSelector(
        @QueryParam("terms") final String terms
        
        ) throws ServletException, IOException, JSONException
    {
        // Start of user code FolderSelector_init
        // End of user code

        httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        // Start of user code FolderSelector_setAttributes
        // End of user code

        if (terms != null ) {
            httpServletRequest.setAttribute("terms", terms);
            final List<Folder> resources = delegate.FolderSelector(httpServletRequest, terms);
            if (resources!= null) {
                JSONArray resourceArray = new JSONArray();
                for (Folder resource : resources) {
                    JSONObject r = new JSONObject();
                    r.put("oslc:label", resource.toString());
                    r.put("rdf:resource", resource.getAbout().toString());
                    r.put("Label", resource.toString());
                    // Start of user code FolderSelector_setResponse
                    //TODO: Add any other attributes that are to be displayed in the search result
                    // End of user code
                    resourceArray.add(r);
                }
                JSONObject response = new JSONObject();
                response.put("oslc:results", resourceArray);
                return Response.ok(response.write()).build();
            }
            log.error("A empty search should return an empty list and not NULL!");
            throw new WebApplicationException(Status.INTERNAL_SERVER_ERROR);

        } else {
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/cz/vutbr/fit/danielpindur/oslc/r4j/folderselector.jsp");
            rd.forward(httpServletRequest, httpServletResponse);
            return null;
        }
    }

    /**
     * Create a single Folder via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "CreateFolder",
         label = "CreateFolder",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Jira_r4jDomainConstants.FOLDER_PATH},
         resourceTypes = {Jira_r4jDomainConstants.FOLDER_TYPE},
         usages = {}
    )
    @POST
    @Path("createFolder")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Operation(
        summary = "Creation factory for resources of type {" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "}",
        description = "Creation factory for resources of type {" + "<a href=\"" + Jira_r4jDomainConstants.FOLDER_TYPE + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}" +
            ", with respective resource shapes {" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Jira_r4jDomainConstants.FOLDER_PATH + "\">" + Jira_r4jDomainConstants.FOLDER_LOCALNAME + "</a>" + "}",
        responses = { 
            @ApiResponse(description = "default response", content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(mediaType = OslcMediaType.APPLICATION_XML), @Content(mediaType = OslcMediaType.APPLICATION_JSON), @Content(mediaType = OslcMediaType.TEXT_TURTLE)})
        }
    )
    public Response createFolder(
            
            final Folder aResource
        ) throws IOException, ServletException
    {
        return errorHandler.Execute("Create Folder", () -> {
            Folder newResource = delegate.createFolder(httpServletRequest, aResource);
            httpServletResponse.setHeader("ETag", delegate.getETagFromFolder(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2).build();
        });
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("creatorFolder")
    @Consumes({MediaType.WILDCARD})
    public Response FolderCreator(
                
        ) throws IOException, ServletException
    {
        // Start of user code FolderCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/cz/vutbr/fit/danielpindur/oslc/r4j/foldercreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
        return null;
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "CreatorFolder",
         label = "CreatorFolder",
         uri = "folders/creatorFolder",
         hintWidth = "250px",
         hintHeight = "250px",
         resourceTypes = {Jira_r4jDomainConstants.FOLDER_TYPE},
         usages = {}
    )
    @POST
    @Path("creatorFolder")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createFolderFromDialog(MultivaluedMap<String, String> formParams
            
        ) throws URISyntaxException, ParseException {
        Folder newResource = null;

        Folder aResource = new Folder();

        List<String> paramValues;

        paramValues = formParams.get("title");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setTitle(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("description");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setDescription(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("identifier");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setIdentifier(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("subfolder");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addSubfolder(new Link(new URI(paramValues.get(i))));
                }
        }
        paramValues = formParams.get("parent");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setParent(new Link(new URI(paramValues.get(0))));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("path");
        if (paramValues != null) {
                if (paramValues.size() == 1) {
                    if (paramValues.get(0).length() != 0)
                        aResource.setPath(paramValues.get(0));
                    // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                }

        }
        paramValues = formParams.get("contains");
        if (paramValues != null) {
                for(int i=0; i<paramValues.size(); i++) {
                    aResource.addContains(new Link(new URI(paramValues.get(i))));
                }
        }

        newResource = delegate.createFolderFromDialog(httpServletRequest, aResource);

        if (newResource != null) {
            httpServletRequest.setAttribute("newResource", newResource);
            httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

            // Send back to the form a small JSON response
            httpServletResponse.setContentType("application/json");
            httpServletResponse.setStatus(Status.CREATED.getStatusCode());
            httpServletResponse.addHeader("Location", newResource.getAbout().toString());
            try {
                PrintWriter out = httpServletResponse.getWriter();
    
                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});
    
                out.print(oslcResponse.toString());
                out.close();
            } catch (IOException | JSONException e) {
                throw new WebApplicationException(e);
            }
        }
    }
}
