// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package cz.vutbr.fit.danielpindur.oslc.r4j.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Jira_r4jDomainConstants;

import cz.vutbr.fit.danielpindur.oslc.r4j.resources.DctermsDomainConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Jira_r4jDomainConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Oslc_rmDomainConstants;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Folder;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.Requirement;
import cz.vutbr.fit.danielpindur.oslc.r4j.resources.RequirementCollection;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Jira_r4jDomainConstants.FOLDER_NAMESPACE)
@OslcName(Jira_r4jDomainConstants.FOLDER_LOCALNAME)
@OslcResourceShape(title = "Folder Shape", describes = Jira_r4jDomainConstants.FOLDER_TYPE)
public class Folder
    extends AbstractResource
    implements IFolder
{
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:description
    // End of user code
    private String description;
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:subfolder
    // End of user code
    private Set<Link> subfolder = new HashSet<Link>();
    // Start of user code attributeAnnotation:parent
    // End of user code
    private Link parent;
    // Start of user code attributeAnnotation:path
    // End of user code
    private String path;
    // Start of user code attributeAnnotation:contains
    // End of user code
    private Set<Link> contains = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Folder()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Folder(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Jira_r4jDomainConstants.FOLDER_PATH,
        Folder.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Folder Resource} - update Folder.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    public void addSubfolder(final Link subfolder)
    {
        this.subfolder.add(subfolder);
    }
    
    public void addContains(final Link contains)
    {
        this.contains.add(contains);
    }
    
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }

    // Start of user code getterAnnotation:description
    // End of user code
    @OslcName("description")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "description")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getDescription()
    {
        // Start of user code getterInit:description
        // End of user code
        return description;
    }

    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "identifier")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(true)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }

    // Start of user code getterAnnotation:subfolder
    // End of user code
    @OslcName("subfolder")
    @OslcPropertyDefinition(Jira_r4jDomainConstants.JIRA_R4J_NAMSPACE + "subfolder")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Jira_r4jDomainConstants.FOLDER_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getSubfolder()
    {
        // Start of user code getterInit:subfolder
        // End of user code
        return subfolder;
    }

    // Start of user code getterAnnotation:parent
    // End of user code
    @OslcName("parent")
    @OslcPropertyDefinition(Jira_r4jDomainConstants.JIRA_R4J_NAMSPACE + "parent")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Jira_r4jDomainConstants.FOLDER_TYPE})
    @OslcReadOnly(false)
    public Link getParent()
    {
        // Start of user code getterInit:parent
        // End of user code
        return parent;
    }

    // Start of user code getterAnnotation:path
    // End of user code
    @OslcName("path")
    @OslcPropertyDefinition(Jira_r4jDomainConstants.JIRA_R4J_NAMSPACE + "path")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getPath()
    {
        // Start of user code getterInit:path
        // End of user code
        return path;
    }

    // Start of user code getterAnnotation:contains
    // End of user code
    @OslcName("contains")
    @OslcPropertyDefinition(Jira_r4jDomainConstants.JIRA_R4J_NAMSPACE + "contains")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_rmDomainConstants.REQUIREMENTCOLLECTION_TYPE, Oslc_rmDomainConstants.REQUIREMENT_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getContains()
    {
        // Start of user code getterInit:contains
        // End of user code
        return contains;
    }

    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
        // Start of user code setterFinalize:title
        // End of user code
    }

    // Start of user code setterAnnotation:description
    // End of user code
    public void setDescription(final String description )
    {
        // Start of user code setterInit:description
        // End of user code
        this.description = description;
        // Start of user code setterFinalize:description
        // End of user code
    }

    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;
        // Start of user code setterFinalize:identifier
        // End of user code
    }

    // Start of user code setterAnnotation:subfolder
    // End of user code
    public void setSubfolder(final Set<Link> subfolder )
    {
        // Start of user code setterInit:subfolder
        // End of user code
        this.subfolder.clear();
        if (subfolder != null)
        {
            this.subfolder.addAll(subfolder);
        }
        // Start of user code setterFinalize:subfolder
        // End of user code
    }

    // Start of user code setterAnnotation:parent
    // End of user code
    public void setParent(final Link parent )
    {
        // Start of user code setterInit:parent
        // End of user code
        this.parent = parent;
        // Start of user code setterFinalize:parent
        // End of user code
    }

    // Start of user code setterAnnotation:path
    // End of user code
    public void setPath(final String path )
    {
        // Start of user code setterInit:path
        // End of user code
        this.path = path;
        // Start of user code setterFinalize:path
        // End of user code
    }

    // Start of user code setterAnnotation:contains
    // End of user code
    public void setContains(final Set<Link> contains )
    {
        // Start of user code setterInit:contains
        // End of user code
        this.contains.clear();
        if (contains != null)
        {
            this.contains.addAll(contains);
        }
        // Start of user code setterFinalize:contains
        // End of user code
    }

}
